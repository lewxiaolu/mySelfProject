一、数据类型包括：基本数据类型和引用数据类型。
   1、基本数据类型包括：number、string、Boolean、null、undefined
       (1）、number:
           整数(正整数,负整数,0),小数,NaN(not a number 不讲理的数)
          1) 问题1:什么情况是得出的结果是NaN :
                A、做数学运算（+，—，*，/，%）失败时
                B、强制（Number()）将其他数据类型转换成number类型失败的时候 (Number(),parseInt(),parseFloat())
                C、NaN跟任何值都不相等
           2）、问题2：怎么判断这个值是否是有效数字?   isNaN()
               isNaN() 检测一个值是否为有效数字，是--false 否--true
               isNaN()检测分为两大步:1.Number()强制转换成数类型的2.isNaN()去检测
               分析：isNaN()在强制类型转化时用到Number(),如果检测不是number类型的，浏览器会默认把他转成number类型的，在做判断。
           3）、Number():强制将其他的数据类型转化为number类型的，若字符串都是数组则
              Number('23.4')->23.4 Number('2px')->NaN
           4）、非强制类型转化（parseInt()、parseFloat()）
               parseInt/parseFloat():从左到右 一个个字符查找，有非有效数字，则停止转化，parseFloat多加一个小数点，找不到则是NaN
               toFixed(小数位数) 特点：1.保留你要的小数位数 2.四舍五入

           //BAT面试题：
                   var num = parseFloat("aaxx111");
                   if(num == "aaxx111"){
                       console.log("这是一个字符串");
                   }else if(num == NaN){
                       console.log("不是一个有效数")
                   }else {
                       console.log("什么都不是");
                   }

                   答案：什么都不是
                   var num = parseFloat("aaxx111"); //NaN
                   if(num == "aaxx111"){//NaN == "aaxx111"
                       console.log("这是一个字符串");
                   }else if(num == NaN){ //NaN == NaN
                       console.log("不是一个有效数")
                   }else {
                       console.log("什么都不是");
                   }

                   //NaN == NaN -->false  NaN是一个笼统的概念,并不是表示具体的一个值,和任何值比较的时候都不相等(包括它自己);





               (2)、 boolean类型的值(true/false)
                   --->  Number(true) ->1  Number(false) ->0
                    1、 number类型的值是简单的传入和传出
                          * null --Number(null)->0
                          * undefined -- Number(undefined)-->NaN
                          * ""  -- Number("") --> 0
                          * 其他的字符串,只要有一个字符不是数字(除.以外),结果就是NaN
                    2、 布尔值5种转换：
                        1） ！-首先将值转化为boolean,在取反
                        2） !!-布尔本身：将其他类型转为boolean类型相当于Boolean()eg:console.log("liuxiaolu")相当于console.log(!!"liuxiaolu")
                        3） Boolean()-规律：除了NaN 0 null undefined ''为false，其他都是true；
                        4） if(只有一个值的时候，自动转换布尔值)
                        5） if（运算表达式）
               (3)、string：双引号或者单引号包起来的就是字符串,单引号或者双引号必须是成对出现的,不成对出现就会报错!
                   1） \用来表示转义  \\-->\  \" -->"  \'-->' \r(回车)\n(换行)\t(制表符)
                   2）+在字符串这边不再是运算符,而表示拼接的意思(在拼接的时候会自动的把其他的数据类型转换成字符串类型)
               （4/5）null和undefined
                       //null是一种标识性数据
                        //undefined 是一种标示性数据类型
                        //null和undefined都表示空
                        //null表示我现在没有,但是我以后会有的
                        //undefined压根从来就没有过
                        //耿大大的男朋友是undefined   耿大大的女朋友是null

                       // var total = null;
                        //var total;
                        //console.log(total);
                        // typeof null "object"
                        //typeof undefined "undefined"

   2、引用数据类型：对象类型和特殊类型
           //对象类型(object,array,math,date,regExp...)
                   * 1.首先开辟一个内存空间,假设引用地址是xxxffoo;
                   * 2.将对象的属性名和属性值保存在这个内存空间里
                   * 3.把引用地址xxxffoo赋值给变量obj1,这样obj1就指向了开辟的内存空间
           //特殊类型(function)
                   1）   * 1.开辟一个内存空间,假设引用地址是xxffoo;
                      * 2.将方法体的内容以字符串的形式保存在这个内存空间里
                      * 3.把引用地址xxffooo赋值给方法名sum,这样sum就代表整个方法

                   2）   //方法执行的步骤
                          //方法执行的时候,会重新开辟一个封闭的内存空间,将方法体里的字符串转变成js语句,每运行一次就会重新开辟一个封闭的内存空间                                           ,这个封闭的内存空间称之为"闭包",起到了保护的作用,方法体里定义的变量就称之为私有的变量之一,只能在方法体里访问,方法外面是访问不到的

                   3）   函数在运行的时候，会形成一个私有空间保护里面的变量不受外界的干扰 ，我们称这种机制为闭包

                   4）    return 并不是一定得写,得看需不需要返回值
                          * 1.如果没写return或者return后面没写任何数据,则方法的返回值就是undefined;
                          * 2.遇到return;方法终止运行,后面的js语句都不再执行


           1）对象:
                var obj = {name:"liu"}--字面量创建方式
                var obj = new Object()---实例的方式创建

                操作对象：增删改查

                //增加属性
                //obj.hobby = "睡觉";
                obj["hobby"] = "睡觉";
                //通过[]的方式增加属性,[]里的一定要用引号引起来


                //查找
                //console.log(obj.width);
                //console.log(obj["width"]);
                //读取width这个属性名对应的值
                //console.log(obj.aa);
                //console.log(obj['aa']);//前提:[]里写了引号的,读取属性的时候,发现这个属性名不存在,则返回undefined;
                //console.log(obj[aa]);//如果[]里不加引号,则表示变量,如果变量不存在则会报错

                var b = "c";
                //console.log(obj[b]);//-->obj["c"]-->undefined
                //步骤:1.先去查找b变量对应的值,2.再去对象里查找这个属性名c对应的值,如果能找到则把对应的值返回,如果找不到则返回undefined

                //修改属性 ->1.先读取->2.修改
                //如果属性不存在,则相当于增加属性
                //obj.width = "20px";
                obj["width"] = "30px";


                //删除属性 真删除/假删除
                //假删除
                //obj.width = null;
                obj["width"] = null;

                //真删除
               // delete obj["width"];
                delete  obj.width;
                //console.log(obj);

           注意;对象数据类型这边的一些细节知识
                 1.属性名可以是数字2.操作属性名是数字的这个属性,只能通过[]的方式,不能通过.的方式,[]里的引号可写可不写,一般情况下不写

           2)判断一个属性是否属于这个对象:in hasOwnProperty





二、基本数据类型和引用数据类型的区别：
      基本数据类型-操作的是值；
      引用数据类型-操作的是地址；



三、数据类型转化：
      1.其他数据类型转为number数据类型
          转换的方式：
          严格转换：Number();
          非严格转换：parseInt()-整数/parseFloat();-浮点数、小数
          isNaN():1)首先通过Number()严格转换 2）判断是不是数字类型
          规律：
          1.boolean布尔值 true:1; false:0;
          2.null/undefined null->0; undefined:NaN;
          3.[]->toString:''->0;
      2.其他数据类型转为boolean数据类型
          转换方式：Boolean(); !; !!; if(运算表达式)； if(单独的值)；
          如果前面有！，一定会首先进行布尔值的转换
          ![]->false
          if('13px'*3){//-,*,/ 只有一个功能就是进行数学运算；-》NaN  false
              alert(true)
              }else{
              alert(false)
          }
          if('13px'+3){//+两个作用：1.字符串拼接 2.数学运算  true
              alert(true)
              }else{
              alert(false)
          }
          规律：除了NaN,0,null,undefined,''为false，其他都为true；
      3.两个值的比较（==,===）==:会隐式类型转换，比较的只是“值”； ===:不仅比较“值”，还要比较“数据类型”
          1）object==object 他们比较的是地址,地址不同两个对象就不同 []==[]-》false；
          2) object==string 都转成字符串   []==''-》true；{}---"object Object"
          3）object==number 都转成数字   []==0->true;
          4) object==boolean 都转成数字  []==false-》true ; ![]==false->true;
          5)string==number   都转成数字 ''==0->true;
          6)string==boolean  都转成数字  ''==false-》true；
          7）number==boolean 都转成数字  2==true->false;
          8)null==undefined->true  null===undefined->false;
          null和undefined他们和其他任何值比较都不相等
          9）NaN==NaN NaN跟任何值比较都不相等，包括他自己比较


      //alert(Number(undefined)) NaN
      //alert(10+null) 10
     // alert(10+undefined)NaN
      /*if('13px'*3){//-,*,/ 只有一个功能就是进行数学运算；-》NaN
          alert(true)
      }else{
          alert(false)
      }*/
      /*if('13px'+3){//+两个作用：1.字符串拼接 2.数学运算
          alert(true)
      }else{
          alert(false)
      }*/
      // alert([]==[])false
      //alert([]=='') true
      //alert(![]==false) true
      //alert(''==0) true
     // alert(''==false)  true
      //alert(2==true) false
      //alert(undefined===undefined)true
      //alert(undefined==null)true
      //alert(null===null)true
      //[1] == "1"; true
       //undefined === null -->false

    /null和undefined和其他数比较都是false,比较的时候不再遵循上面的规律





