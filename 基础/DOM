1、DOM (document object model)文档对象模型 提供了操作页面元素常用的属性和方法
      1.document.getElementById("div1")  通过id名获得元素,获得的元素是唯一的 (主体也只能是document)
      2.context(上下文）.getElementsByTagName('标签名')；这里获取的是一系列元素，他是一个类数组，有.length属性；
      3.获得类名是a的标签 document.getElementsByClassName("a") ie6-ie8不兼容
      4.通过name属性值获得一组元素(主体也只能是document)
          var oInputs =  document.getElementsByName("bc");//ie不兼容非表单元素的name属性
      console.log(oInputs.length);
      5.通过选择器获取一个或一组元素(在移动端常用)
          document.querySelector(".p1")//只能获得一个元素 querySelector
          document.querySelectorAll(".p1");获取的是一组
          document.querySelectorAll("ul>li");//获得是一组元素
      6、document.documentElement 整个HTML
          document.body 整个body
          document.documentElement.clientHeight||document.body.clientHeight;
          document.documentElement.clientWidth||document.body.clientWidth;

2、 DOM能够将html/xml标签渲染成具有层次结构的节点,每个节点都自己的属性和方法
      一个页面只有一个文档节点(根节点,document),文档节点只有一个元素节点(html元素)
      文档节点  nodeType 9  nodeName "#document"  nodeValue null
      注释节点  nodeType 8  nodeName "#comment"   nodeValue 注释的内容
      文本节点  nodeType 3  nodeName  "#text"     nodeValue 文本的内容(回车和空格)
      元素节点  nodeType 1  nodeName  大写的标记名  nodeValue null

      如果这些节点都没有找到,则返回的是null
          firstChild 第一个子节点
          firstElementChild  第一个子元素节点(ie6-ie8不兼容)
          lastChild 最后一个子节点
          lastElementChild 最后一个子元素节点(ie6-ie8不兼容)
          previousSibling 最近的哥哥节点 (文本节点,注释节点,元素节点)
          previousElementSibling 最近的哥哥元素节点(ie6-ie8不兼容)
          nextSibling 最近的弟弟节点
          nextElementSibling 最近的弟弟元素节点(ie6-ie8不兼容)
          childNodes 所有的子节点
          children 所有子元素节点 ie6-ie8会把文本节点(不包含回车和空格)也当成元素节点
          parentNode 父节点(唯一的)

3、动态操作
      1.createElement 创建元素节点(主体只能是document)
          var div2  = document.createElement("div");
          div2.id = "div2";
          div2.innerHTML = "我的是添加的div2";


       2.createTextNode  创建文本节点(主体只能是document)
          var oText = document.createTextNode("我的是添加的div2");
          把文本节点添加到div2里
          div2.appendChild(oText);


       3.appendChild()把节点添加到页面上(添加到末尾的位置) (主体是操作元素的父标签)
          document.body -->body元素
          document.documentElement -- >html元素
          document.body.appendChild(div2);


       4.insertBefore(newEle,oldEle) 把newEle插入到oldEle之前
          var div1 = document.getElementById("div1");
          document.body.insertBefore(div2,div1);


       5.replaceChild(newEle,oldEle) 用newEle替换oldEle
          document.body.replaceChild(div2,div1);
          div1.parentNode.replaceChild(div2,div1)


       6.removeChild(ele) 删除ele元素
          div1.parentNode.removeChild(div1);


       7.cloneNode(true)克隆某个元素(深度克隆(true)和浅克隆(false或者参数没写))
          深度克隆是将后代全部都克隆出来
          浅克隆是仅仅克隆本身
          var oDiv3 = div1.cloneNode(true);//仅仅是克隆节点,并没有在页面上显示出来,克隆完之后还得添加到页面上去
          document.body.appendChild(oDiv3);


       8.自定义属性
          div1.zhufeng = "peixun";
          div1["zhueng"] = "peixun";
          console.log(div1["zhufeng"]);
          div1.index = "111";

          setAttribute(属性名,值)设置属性(自定义的属性/固有属性)
          div1.setAttribute("zhufeng","peixun");
          getAttribute(属性名) 得到属性值
          console.log(div1.getAttribute("zhufeng"));
          div1.setAttribute("id","div3");
          div1.setAttribute("class","aa"); //ie6-ie7不兼容 class的属性值能设置成功,但是样式不起作用
          console.log(div1.getAttribute("index"))//null  不可以,得一一对应



1.创建元素：
document.createElement('标签名') 创建一个元素
obj.cloneNode(boolean)  true：连子元素一起克隆 false：只克隆他自己，不含他里面的子元素
2.插入元素
oParent.appendChild(创建的元素) 插入到父容器的最后面；
oParent.insertBefore(newEle,oldeEle) 插入到父容器中指定的元素的前面；
3.删除元素
oParent.removeChild(要删除的元素)
4.替换元素
oParent.replaceChild(newEle,oldEle);

//操作属性的方式：
1.通过点和[]来操作；
2.通过setAttribute()设置元素属性
obj.setAttribute(name,value)设置元素属性
obj.getAttribute(name)得到元素属性
obj.removeAttribute(name)移出元素属性
注意:.和setAttribute一定不能混着来；